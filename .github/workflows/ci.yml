name: CI/CD Pipeline

# Trigger the workflow on push or pull request events
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      # Add a service for PostgreSQL if needed for testing
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cnctdai
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js for both backend and frontend
      - name: Set up Node.js for Backend
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        working-directory: ./backend

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        working-directory: ./frontend

      # Step 3: Install dependencies for backend
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend

      # Step 4: Install dependencies for frontend
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./frontend

      # Step 5: Run backend tests
      - name: Run Backend Tests
        run: npm test
        working-directory: ./backend

      # Step 6: Run frontend tests
      - name: Run Frontend Tests
        run: npm test
        working-directory: ./frontend

      # Step 7: Security audit with npm for backend
      - name: Run npm audit for Backend
        run: npm audit
        working-directory: ./backend

      # Step 8: Security audit with npm for frontend
      - name: Run npm audit for Frontend
        run: npm audit
        working-directory: ./frontend

  docker_build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 9: Set up Docker Buildx for building images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 10: Log in to DockerHub (using secrets)
      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 11: Build and push backend Docker image
      - name: Build and Push Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cnctd-ai-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/cnctd-ai-backend:latest

      # Step 12: Build and push frontend Docker image
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cnctd-ai-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/cnctd-ai-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      # Step 13: Deploy to production (optional, based on your deployment target)
      # You can deploy to AWS ECS, DigitalOcean, or Kubernetes here.

      # Example: AWS ECS deployment (using ECS task definition and services)
      # - name: Deploy to AWS ECS
      #   run: |
      #     aws ecs update-service --cluster cnctd-ai-cluster --service cnctd-ai-service --force-new-deployment
